:ffi LibPony
  :fun pony_os_stdin_setup Bool
  :fun pony_os_stdin_read(buffer CPointer(U8), size USize) USize

// TODO: Documentation
:class StdIn.Engine
  :is IO.Engine(IO.Action)
  :is ByteStream.Source

  :let _actor IO.Actor(IO.Action)

  :var _deferred_action_opened: False
  :var _deferred_action_open_failed: False
  :var _deferred_action_read: False

  :let read_stream: ByteStream.Reader.new

  :var _evented_core (IO.CoreEngine | None): None
  :fun _has_evented_core: @_evented_core !<: None

  :var _ticket (StdIn.Ticket | None): None
  :fun has_ticket: @_ticket !<: None

  :new (@_actor) // Note that we don't actually start until `run` is called

  :fun ref run(ticket (StdIn.Ticket | None))
    if (ticket <: StdIn.Ticket) (
      @_ticket = --ticket
      @_setup_core
      @_deferred_action_opened = True
    |
      @_deferred_action_open_failed = True
    )
    @_actor.io_deferred_actions

  // TODO: Allow extracting the ticket with :fun ref dispose
  // Thus allowing you to read part of the stdin stream with one actor,
  // then transfer authority to another actor after decommissioning the first.

  :fun ref _setup_core
    // We use an evented core only if `pony_os_stdin_setup` returns true.
    // We'll use a non-evented core on unix systems where the stdin fd comes
    // from a file instead of from a tty (which is properly evented).
    @_evented_core =
      if LibPony.pony_os_stdin_setup IO.CoreEngine.new_from_fd_r(@_actor, 0)

    // If we have no evented core, immediately begin reading by deferring
    // a read action, which will end up repeating until reading is done.
    if !@_has_evented_core (
      @_deferred_action_read = True
    )

  :fun ref deferred_actions
    // If we have a deferred action from opening, yield it now.
    case (
    | @_deferred_action_opened |
      @_deferred_action_opened = False
      yield IO.Action.Opened

    | @_deferred_action_open_failed |
      @_deferred_action_open_failed = False
      yield IO.Action.OpenFailed
    )

    if @_deferred_action_read (
      @_deferred_action_read = False

      // Try to read.
      did_read = @_read_if_available
      if did_read (
        yield IO.Action.Read
      |
        // If we weren't able to read anything, and we're in a non-evented mode,
        // mark the stream as closed and emit the "closed" action.
        // We won't try to read anything again.
        if !@_has_evented_core (
          yield IO.Action.Closed
        )
      )
    )

    // TODO: Enable this section:
    // // If we have an evented core, run any deferred actions it needs to run.
    // evented_core = @_evented_core
    // if (evented_core <: IO.CoreEngine) (
    //   evented_core.deferred_actions -> (action | yield action)
    // )

    @

  :fun ref react(event CPointer(AsioEvent), flags U32, arg U32) @
    :yields IO.Action for None
    evented_core = @_evented_core
    if (evented_core <: IO.CoreEngine) (
      evented_core.react(event, flags, arg) -> (action |
        case action == (
        | IO.Action.Read | if @_read_if_available (yield IO.Action.Read)
        | yield action
        )
      )
    )
    @

  :fun ref _read_if_available Bool
    did_read = try (
      bytes_read = @read_stream.receive_from!(@)

      // If we've reached the end of the stream, close things out.
      if (bytes_read == 0) (
        // Close the evented core.
        evented_core = @_evented_core
        if (evented_core <: IO.CoreEngine) (
          // TODO: We need to disentangle the core engine from TCP stuff,
          // because this function also tries to close the socket.
          // We only call this function here to unsubscribe the ASIO event.
          evented_core.hard_close
        )

        return False
      )

      True // we did read something
    |
      False // there was nothing to read now, but the stream is still open
    )

    // If we read some amount of bytes, ask the actor to call us again soon,
    // so we can try again to read more bytes, until there's nothing to read.
    if did_read (
      @_deferred_action_read = True
      @_actor.io_deferred_actions
    )

    did_read

  :: Receive bytes into the given read buffer, starting at the buffer's end.
  :fun ref emit_bytes_into!(read_buffer Bytes'ref) USize
    // Raise an error if there is no space left in the buffer.
    orig_size = read_buffer.size
    if (orig_size == read_buffer.space) error!

    // Read into the buffer.
    bytes_read = LibPony.pony_os_stdin_read(
      read_buffer.cpointer(orig_size)
      read_buffer.space - orig_size
    )

    // Raise an error if there was nothing available to read right now.
    if (bytes_read == -1) error!

    // Update the size of the buffer with the newly filled bytes.
    new_size = orig_size + bytes_read
    read_buffer.resize_possibly_including_uninitialized_memory(new_size)

    // Return the number of bytes that were read into the buffer.
    bytes_read
